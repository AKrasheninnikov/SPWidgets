{"name":"Spwidgets","body":"About\r\n-----\r\n\r\nSPWidgets is a jQuery plugin that provides SharePoint Widgets that can be used for creating customized User Interfaces (UI) on the SharePoint platform using Client Side scripting (javascript).\r\n\r\n\r\nDependencies\r\n------------\r\n\r\nSPWidgets has the following dependencies:\r\n\r\n1.  [jQuery](http://jquery.com)\r\n2.  [jQuery UI](http://jqueryui.com)\r\n3.  [SPServices](http://spservices.codeplex.com)\r\n\r\n\r\nUsage\r\n-----\r\n\r\nThe following is an example that loads the required libraries from CDN's, the SPWidgets from the local site and then initiates the People Picker plugin on an input field inside a jQuery UI dialog.\r\n\r\n\r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.18/themes/redmond/jquery-ui.css\" />\r\n    <script type=\"text/javascript\" src='https://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js'></script>\r\n    <script type=\"text/javascript\" src='https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.18/jquery-ui.min.js'></script>\r\n    <script type=\"text/javascript\" src='http://cdnjs.cloudflare.com/ajax/libs/jquery.SPServices/0.7.1a/jquery.SPServices-0.7.1a.min.js'></script>\r\n    <script type=\"text/javascript\" src='yoursite/path/to/SPWidgets.js'></script>\r\n    <script type=\"text/javascript\">\r\n        $(document).ready(function(){\r\n            $(\"<div> <input name=\"users\" value=\"\" /> </div>\")\r\n                .appendTo(\"body\")\r\n                .find(\"input\")\r\n                    .pickSPUser()\r\n                    .end()\r\n                .dialog();\r\n        });\r\n    </script>\r\n\r\n\r\nLicense\r\n-------\r\n\r\nDual License support\r\n\r\n-   [MIT](http://www.opensource.org/licenses/mit-license.php)\r\n-   [GPL](http://www.opensource.org/licenses/gpl-license.php)\r\n\r\nUser can pick whichever one applies best for their project\r\nand does'nt not have to contact me.\r\n\r\n\r\nAuthor\r\n------\r\n\r\n<span id=\"ptAuthorInfo\">\r\n[Paul Tavares](http://paultavares.wordpress.com) @purtuga\r\n\r\nFollow me at Twitter [@paul_tavares](https://twitter.com/paul_tavares) \r\n</span>\r\n\r\nVersion\r\n-------\r\n\r\n-   Version: _BUILD_VERSION_NUMBER_\r\n-   Build Date: _BUILD_VERSION_DATE_\r\n\r\n\r\npickSPUser Widget\r\n=================\r\n\r\nGiven an input field, this method will display an interface that allows the users to select one or more users from SharePoint and stores the selected user information into the input field in the format expected when making an update via webservices.\r\n\r\nThe input field will be hidden in its current position and a UI will displayed instead. As the user picks or removes users, the input field will be updated at the same time, thus it will always be ready to be submitted as part of an update to the server.\r\n\r\n\r\nUsage\r\n-----\r\n\r\n    $(\"input[name='users']\").pickSPUser();\r\n    \r\n\r\nInput Parameters\r\n----------------\r\n\r\nThis method takes as input an object containing the following options\r\n\r\n\r\n-   **allowMultiples**      :   *Boolean. Optional. Default=true.* <br />\r\n                                Determine whether multiple users can be picked.\r\n                                \r\n-   **maxSearchResults**    :   *Integer. Optional. Default=50.* <br />\r\n                                The max number of results to be returned from the\r\n                                server.\r\n                                \r\n-   **onPickUser**          :   *Function. Optional. Default=null.* <br />\r\n                                Function that is called when user makes a selection.\r\n                                Function will have a context (*this* keyword) of the\r\n                                input field to which this plugin was bound, and\r\n                                will be given one input param; an object containing\r\n                                information about the selection made by the user. This\r\n                                object will contain data returned by the SharePoint's\r\n                                webservice.\r\n\r\n\r\nReturn Value\r\n------------\r\n\r\nThis plugin will return a jQuery object that contains the initially selected set of node, thus maintaining chainability.\r\n \r\n\r\nExamples\r\n--------\r\n\r\nBind people picker and allow only 1 person to be selected/stored.\r\n\r\n    $(\"input[name='users']\").pickSPUser({\r\n        allowMultiples: false\r\n    });\r\n\r\n\r\nWhen user makes a selection, show alert with person's info.\r\n\r\n    $(\"input[name='users']\").pickSPUser({\r\n        onPickUser: function(person){\r\n            alert(\"User selected: \\n displayName: \" + \r\n                person.displayName + \"\\n accountId: \" +\r\n                person.accountId + \"\\n accountName: \" +\r\n                person.accountName + \"\\n accountType:\" +\r\n                person.accountType);\r\n        }\r\n    });\r\n\r\n    \r\nSPControlUpload Widget\r\n======================\r\n\r\njQuery plugin that inserts a widget into page for uploading a file to a SharePoint location (library) without having to leave the page that the user is currently on. This plugin provides a behavior similar to an async ajax call.\r\n\r\nAt its core, this plugin is simply uses the default SharePoint upload.aspx page inside an iframe, but manipulating it from the hosted page, so that the user is shown only a minimalist UI.  Code hooks are provided for allowing a developer to further manipulate the page(s) that may be shown after the initial upload _(ex. some libraries require users to fill in additional information and then check in the document. This can all be automated without user input.)_\r\n\r\nIn a normal flow, the upload process follows this sequence:\r\n\r\n1.  Display upload form. User selects a file for upload and presses the upload button.\r\n2.  File is uploaded to the server and depending on the setup, a check in page may be displayed.\r\n3.  File is checked in and file upload is complete. Page is redirected to display/list view.\r\n\r\n\r\n\r\nUsage\r\n-----\r\n\r\n    $(\"input[name='users']\").SPControlUpload({\r\n        listName: \"Shared Documents\",\r\n        onPageChange: function(ev){\r\n            if (ev.state === 3) {\r\n                ev.hideOverlay = false;\r\n                alert(\"Upload Done!\");\r\n            }\r\n        }\r\n    });\r\n    \r\n\r\nInput Parameters\r\n----------------\r\n\r\nThis method takes as input an object containing the following options\r\n\r\n-   **listName**  :   _String. **REQUIRED.**_ <br />\r\n    The name or UID of the list.\r\n    Example 'Shared Documents' or '{67587-89284-93884-78827-78823}'\r\n                    \r\n-   **folderPath** :  *String. Optional. Default=\"/\"* <br />\r\n    The path to the folder inside of the Document Library where\r\n    the document should be uploaded to. Value can be either relative to the\r\n    document library root or absolute. Default is to place the\r\n    document at the root of the Document Library\r\n    Examples 'http://yourdomain.com/sites/site1/Shared Documents' or\r\n    '/sites/site1/Shared Documents'\r\n                     \r\n-   **uploadDonePage** : *String. Optional. Default=\"/_layouts/viewlsts.aspx\".* <br />\r\n    The url of the page that should be loaded after the\r\n    file has been uploaded successful. Value MUTST start with http.\r\n    Default is 'http://yourdomain.com/sites/site1/_layouts/viewlsts.aspx'\r\n  \r\n-   **onPageChange** :  *Function. Optional. Default=null.* <br />\r\n    Function that is called each time the form in the\r\n    iFrame is changed. The function 'this' keyword points to the\r\n    element that was used when this method was called.\r\n    The function is given one param - the event object created \r\n    by this plugin that includes information about the state\r\n    of the upload. See Event Object below for more information.\r\n    Return value of this function will control flow of plugin.\r\n    Returning true (boolean), will allow processing to continue\r\n    at different stages (see the event object below), while \r\n    returning false (boolean) will stop flow from continuing. The\r\n    check is strict; meaning that it has to be a boolean false in\r\n    order for flow to stop. \r\n                    \r\n        onPageChange: function(ev){\r\n            // this=original $(selector)\r\n            // so some processing\r\n            return true; // allow form to proceed.\r\n        }\r\n                    \r\n-   **uploadUrlOpt** :  *String. Optional. Default=\"\".* <br />\r\n    String of data that should be appended to the upload page url,\r\n    following this '?\".\r\n    This string value is assumed to have already been properly \r\n    escaped for use in the url.<br />\r\n    _NOTE_: The option \"MultipleUpload=1\" is NOT SUPPORTED.\r\n                    \r\n-   **overwrite** :   *Boolean. Optional. Default=False.* <br />\r\n    True or False indicating if document being uploaded should\r\n    overwrite any existing one. Default is False (don't overwrite)\r\n                    \r\n-   **uploadPage** :  *String. Optional. Default=\"/_layouts/Upload.aspx\".* <br />\r\n    The relative URL from the WebSite root to the upload page.\r\n    Default is \"/_layouts/Upload.aspx\". This value is appended to\r\n    to the website full url, which is retrieved using SPServices\r\n    utility.\r\n                    \r\n-   **overlayClass** :  *String. Optional. Default=\"\".* <br />\r\n    A css class to be associated with the overlay that is displayed\r\n    over the iframe while loading of the page is going on.\r\n                    \r\n-   **overlayBgColor** : *String. Optional. Default=\"white\".* <br />\r\n    A color to be used for the overlay area that is displayed over\r\n    the iframe wile loading of the page is going on. Default is\r\n    white. Set this to null if wanting only to use a class.\r\n                    \r\n-   **overlayMessage** : *String|HTMLElement|jQuery. Optional. Default=\"Loading...\".* <br />\r\n    String or object/element to be displayed inside of the overlay\r\n    when it is displayed. \r\n\r\n\r\nEvent Object\r\n------------\r\n\r\nThe function defined for the *onPageChange* input parameter will receive as input an event object generated by this plugin. The object will contain information about the state of the upload process. \r\n\r\nThe following attributes can be found in the event object: \r\n\r\n-   **ev.state**  : *Integer. 1|2|3* <br />\r\n    A value from 1 through 3 that represents the state of\r\n    the phisical file. This value, along with the \r\n    _ev.action_ value can be used to validate user input\r\n    and if appropriate, cancel the send request to the\r\n    server.\r\n    \r\n    1.  No File uploaded. Upload form is ready for user input.\r\n        This is set when the form is initially loaded and the \r\n        File html element is ready for the user to attach the file.\r\n        \r\n    2.  No File uploaded. User has defined a file for upload and\r\n        form is now ready to be submitted to the server. This state\r\n        could be used in the _onPageChange_ to (for example) prevent\r\n        the upload of certain file types.  \r\n        \r\n    3.  File has been uploaded and is now available on the server (note\r\n        that it may not be checked in yet).  This state is set when the\r\n        user has successfully uploaded the file to the server and no \r\n        errors were encountered (example invalid file characters).\r\n        This state will remain through subsequent pages if the file\r\n        requires check in.\r\n      \r\n-   **ev.action** : *String. preLoad|postLoad*  <br /> \r\n    The event action as it pertains to this plugin. Use this value in\r\n    conjuction with the _ev.state_ to do additional validations on user\r\n    input.\r\n    *   _preLoad_   - action is taking place before the page is sent to\r\n                      the server. The user (or code) must have initiated\r\n                      an action that requires sending data to the server.\r\n    *   _postLoad_  - action is taking place after page has completed\r\n                      loading, but is not yet \"visible\" to the user.\r\n      \r\n-   **ev.hideOverlay** : *Boolean. Default=true.*  <br />\r\n    Used when action=postLoad. Can be set by a callback function to false, \r\n    so that the busy overlay remains displayed and is not automatically \r\n    hidden.\r\n      \r\n-   **ev.pageUrl** : *String.* <br />\r\n    The url of the page currently loaded in the iframe.\r\n      \r\n-   **ev.page** : *jQuery Object.*  <br />\r\n    An object representing the page loaded inside the iFrame. This can be\r\n    used to further manipulate the iframe's page content.\r\n      \r\n-   **ev.isUploadDone** : *Boolean.* <br />\r\n    Indicates if the upload process is done. Basically, this means that \r\n    the processes has reached the page defined in the *updatePageDone* \r\n    parameter.\r\n  \r\n\r\nReturn Value\r\n------------\r\n\r\nThis plugin will return a jQuery object that contains the initially selected\r\nset of node, thus maintaining chainability.\r\n \r\n\r\nExamples\r\n--------\r\n\r\n### Example 1\r\n\r\nThe following example creates a jQuery UI dialog to display the upload interface to the user.  The dialog closes after the file is sucessfuly uploaded. It demostrates the use of the event object's _state_ and _isUploadDone_ attributes. \r\n\r\n    $('<div style=\"height:350px;width;100%;padding:.5em;\"></div>')\r\n        .appendTo(\"body\")\r\n        .dialog()\r\n        .SPControlUpload({\r\n            listName:       \"Shared Documents\", \r\n            onPageChange:   function(ev){\r\n                \r\n                // If we're done with the upload, then continue to show the\r\n                // overlay, and fade out the area that contained the upload control. \r\n                if (ev.state == 3 && ev.isUploadDone) {\r\n                    ev.hideOverlay = false;                    \r\n                    setTimeout(function(){\r\n                            $(this).dialog(\"close\").dialog(\"destroy\");\r\n                            alert(\"Upload Done!\");\r\n                        }, 1000);\r\n                    \r\n                // If file was uploaded, but we have required fields to fill out,\r\n                // then adjust page to only show the required data... \r\n                } else if (ev.state == 3 && !ev.isUploadDone) {\r\n                            \r\n                    // Because we're coming from the same domain, we\r\n                    // have full access to the content of the page,\r\n                    // and thus we can manipulate it. In this example\r\n                    // I hide all chrome and show only the form fields\r\n                    // the user should be filling in.\r\n                    // Note that this works because in this very simple\r\n                    // example, I assume that the required fields form\r\n                    // does not have any special fields, like people pickers,\r\n                    // etc.\r\n                    ev.page.find(\"form\")\r\n                        .children(\":visible\")\r\n                            .css(\"display\", \"none\")\r\n                            .addClass(\"ptWasVisible\")\r\n                            .end()\r\n                        .find(\"input[title='Name']\")\r\n                            .closest(\"div[id^='WebPart']\")\r\n                                .appendTo(ev.page.find(\"form\"));\r\n                        }\r\n\r\n            }//end: onPageChange()\r\n        });\r\n\r\n### Example 2\r\n\r\nIn this example the file that the user is attempting to upload will be checked and if not a PDF file, then an error is displayed and the file is not uploaded.\r\n\r\n    $('<div style=\"height:350px;width;100%;padding:.5em;\"></div>')\r\n        .appendTo(\"body\")\r\n        .dialog()\r\n        .SPControlUpload({\r\n            listName:       \"Shared Documents\", \r\n            onPageChange:   function(ev){\r\n                \r\n                // If we're done with the upload, then continue to show the\r\n                // overlay, and fade out the area that contained the upload control. \r\n                if (ev.state == 3 && ev.isUploadDone) {\r\n                    ev.hideOverlay = false;                    \r\n                    setTimeout(function(){\r\n                            $(this).dialog(\"close\").dialog(\"destroy\");\r\n                            alert(\"Upload Done!\");\r\n                        }, 1000);\r\n                    \r\n                // If file was uploaded, but we have required fields to fill out,\r\n                // then adjust page to only show the required data... \r\n                } else if (ev.state == 3 && !ev.isUploadDone) {\r\n                    \r\n                    ev.page.find(\"form\")\r\n                        .children(\":visible\")\r\n                            .css(\"display\", \"none\")\r\n                            .addClass(\"ptWasVisible\")\r\n                            .end()\r\n                        .find(\"input[title='Name']\")\r\n                            .closest(\"div[id^='WebPart']\")\r\n                                .appendTo(ev.page.find(\"form\"));\r\n                        }\r\n                \r\n                // User has clicked UPLOAD. If file type not pdf, error\r\n                } else if (ev.state == 2 && ev.action === \"preLoad\") {\r\n                    var uploadFileName = String(ev.page.find(\"input[type='file']\").val()); \r\n                    if (uploadFileName.match(/\\.pdf$/i) === null) {\r\n                        alert(\"Only PDF file are allowed!!\");\r\n                        return false; // Cancel upload\r\n                    }\r\n                    \r\n                }\r\n            }//end: onPageChange()\r\n        });\r\n\r\n\r\n\r\n","tagline":"Sharepoint Custom UI Widgets","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}